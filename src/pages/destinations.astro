---
import { getCollection } from "astro:content";

import Layout from "~/layouts/Layout.astro";
import Section from "~/components/Section.astro";
import Container from "~/components/Container.astro";
import Heading from "~/components/Heading.astro";

// For tourism context, we'll repurpose the car collection as destinations
// In a real tourism site, this would be a "destinations" collection
const allDestinations = await getCollection(
  "cars",
  ({ data }) => !data.misc?.hidden
);
const uniqueDestinations = [
  ...new Set(
    allDestinations.map((destination) => destination.data.general.make)
  ),
];
uniqueDestinations.sort((a, b) => a.localeCompare(b));

const groupedDestinations: Record<string, string[]> = uniqueDestinations.reduce(
  (acc, destination) => {
    const firstLetter = destination[0].toUpperCase();
    if (!acc[firstLetter]) {
      acc[firstLetter] = [];
    }
    acc[firstLetter].push(destination);
    return acc;
  },
  {} as Record<string, string[]>
);

// Mapping destinations to tourism categories
const destinationCategories = {
  "Beach Resorts": ["BMW", "Mercedes", "Audi"], // Map car brands to beach destinations
  "Mountain Adventures": ["Volkswagen", "Toyota", "Honda"], // Map to mountain destinations
  "Cultural Cities": ["Porsche", "Ferrari", "Lamborghini"], // Map to cultural destinations
  "Nature Parks": ["Jeep", "Land Rover", "Subaru"], // Map to nature destinations
};
---

<Layout pageTitle="Destinations">
  <Section class:list={"bg-white"}>
    <Container class:list={"max-w-3xl"}>
      <Heading>
        <h1 slot="heading-title">Travel Destinations</h1>

        <p class="-mb-16" slot="heading-content">
          Discover amazing destinations around the world. From pristine beaches
          to majestic mountains, cultural cities to natural wonders - find your
          perfect getaway.
        </p>
      </Heading>
    </Container>
  </Section>

  <Section class:list={"bg-gray-50"}>
    <Container class:list={"max-w-5xl"}>
      {/* Featured Categories */}
      <div class="mb-12">
        <h2 class="text-2xl font-bold text-gray-900 mb-6">
          Browse by Category
        </h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {
            Object.entries(destinationCategories).map(
              ([category, destinations]) => (
                <div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow">
                  <h3 class="text-lg font-semibold text-gray-900 mb-3">
                    {category}
                  </h3>
                  <p class="text-gray-600 text-sm mb-4">
                    {destinations.length} destinations available
                  </p>
                  <a
                    href={`/destinations?category=${encodeURIComponent(category.toLowerCase().replace(" ", "-"))}`}
                    class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium text-sm"
                  >
                    Explore {category}
                    <svg
                      class="ml-1 w-4 h-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 5l7 7-7 7"
                      />
                    </svg>
                  </a>
                </div>
              )
            )
          }
        </div>
      </div>

      {/* All Destinations A-Z */}
      {
        Object.keys(groupedDestinations).length > 0 ? (
          <div>
            <h2 class="text-2xl font-bold text-gray-900 mb-6">
              All Destinations A-Z
            </h2>
            <ul class="grid grid-cols-1 p-4 lg:p-8 rounded-lg shadow-md border border-gray-100 gap-4 lg:grid-cols-3 bg-white">
              {Object.keys(groupedDestinations)
                .sort()
                .map((letter) => (
                  <li>
                    <h3 class="text-xl font-bold mt-4 text-gray-900">
                      {letter}
                    </h3>
                    <ul class="space-y-2">
                      {groupedDestinations[letter].map((destination) => (
                        <li>
                          <a
                            href={`/destinations/?destination=${encodeURIComponent(destination)}`}
                            class="text-blue-600 hover:text-blue-800 hover:underline transition-colors"
                          >
                            {destination}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </li>
                ))}
            </ul>
          </div>
        ) : (
          <div class="text-center py-12">
            <p class="text-gray-600">
              No destinations available at the moment. Please check back later
              for exciting new travel opportunities!
            </p>
          </div>
        )
      }
    </Container>
  </Section>
</Layout>
